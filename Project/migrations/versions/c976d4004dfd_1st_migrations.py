"""1st migrations

Revision ID: c976d4004dfd
Revises: 
Create Date: 2025-04-05 10:25:20.037923

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'c976d4004dfd'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_login_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_uid'), 'users', ['uid'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('categories',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_uid', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_uid'], ['users.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=True)
    op.create_index(op.f('ix_categories_uid'), 'categories', ['uid'], unique=True)
    op.create_table('purchase',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('purchasing_plase', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('purchaser', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
    sa.Column('beneficiary', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
    sa.Column('curuncy_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('total_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('receipt_number', sa.Integer(), nullable=True),
    sa.Column('recipient', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('purchase_date', sa.Date(), nullable=True),
    sa.Column('user_uid', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_uid'], ['users.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_purchase_beneficiary'), 'purchase', ['beneficiary'], unique=False)
    op.create_index(op.f('ix_purchase_curuncy_type'), 'purchase', ['curuncy_type'], unique=False)
    op.create_index(op.f('ix_purchase_note'), 'purchase', ['note'], unique=False)
    op.create_index(op.f('ix_purchase_purchaser'), 'purchase', ['purchaser'], unique=False)
    op.create_index(op.f('ix_purchase_purchasing_plase'), 'purchase', ['purchasing_plase'], unique=False)
    op.create_index(op.f('ix_purchase_receipt_number'), 'purchase', ['receipt_number'], unique=False)
    op.create_index(op.f('ix_purchase_recipient'), 'purchase', ['recipient'], unique=False)
    op.create_index(op.f('ix_purchase_uid'), 'purchase', ['uid'], unique=True)
    op.create_table('items',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('item_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('stock', sa.Integer(), nullable=False),
    sa.Column('unit', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('minimum_stock_level', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_uid', sa.Uuid(), nullable=True),
    sa.Column('category_uid', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category_uid'], ['categories.uid'], ),
    sa.ForeignKeyConstraint(['user_uid'], ['users.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_items_description'), 'items', ['description'], unique=False)
    op.create_index(op.f('ix_items_item_name'), 'items', ['item_name'], unique=True)
    op.create_index(op.f('ix_items_minimum_stock_level'), 'items', ['minimum_stock_level'], unique=False)
    op.create_index(op.f('ix_items_stock'), 'items', ['stock'], unique=False)
    op.create_index(op.f('ix_items_uid'), 'items', ['uid'], unique=True)
    op.create_index(op.f('ix_items_unit'), 'items', ['unit'], unique=False)
    op.create_table('purchas_items',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unite_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('subtotal_price', sa.DECIMAL(precision=11, scale=2), nullable=True),
    sa.Column('note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('user_uid', sa.Uuid(), nullable=True),
    sa.Column('item_uid', sa.Uuid(), nullable=True),
    sa.Column('purchas_uid', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['item_uid'], ['items.uid'], ),
    sa.ForeignKeyConstraint(['purchas_uid'], ['purchase.uid'], ),
    sa.ForeignKeyConstraint(['user_uid'], ['users.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_purchas_items_note'), 'purchas_items', ['note'], unique=False)
    op.create_index(op.f('ix_purchas_items_uid'), 'purchas_items', ['uid'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_purchas_items_uid'), table_name='purchas_items')
    op.drop_index(op.f('ix_purchas_items_note'), table_name='purchas_items')
    op.drop_table('purchas_items')
    op.drop_index(op.f('ix_items_unit'), table_name='items')
    op.drop_index(op.f('ix_items_uid'), table_name='items')
    op.drop_index(op.f('ix_items_stock'), table_name='items')
    op.drop_index(op.f('ix_items_minimum_stock_level'), table_name='items')
    op.drop_index(op.f('ix_items_item_name'), table_name='items')
    op.drop_index(op.f('ix_items_description'), table_name='items')
    op.drop_table('items')
    op.drop_index(op.f('ix_purchase_uid'), table_name='purchase')
    op.drop_index(op.f('ix_purchase_recipient'), table_name='purchase')
    op.drop_index(op.f('ix_purchase_receipt_number'), table_name='purchase')
    op.drop_index(op.f('ix_purchase_purchasing_plase'), table_name='purchase')
    op.drop_index(op.f('ix_purchase_purchaser'), table_name='purchase')
    op.drop_index(op.f('ix_purchase_note'), table_name='purchase')
    op.drop_index(op.f('ix_purchase_curuncy_type'), table_name='purchase')
    op.drop_index(op.f('ix_purchase_beneficiary'), table_name='purchase')
    op.drop_table('purchase')
    op.drop_index(op.f('ix_categories_uid'), table_name='categories')
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.drop_table('categories')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_uid'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
